[ main ]
batch_name = 'needle_switched';
Nstates = 6;
Ninputs = 2;
Nsamples = 64;
x0 = [ 0; 0; 0; 0; 0; 0 ];  % [ px, py, pz, yaw, pitch, roll ]
u0 = [ 0, 0, 0, 0; 0, 0, 0, 0 ];
d0 = [ 0.5; 0.5 ]; % remember to make sure to sum to one (otherwise this won't work)
terminal_loc = [ -2; 3.5; 10 ];
t0 = 0;
tf = 8;
x_max = [  Inf;  Inf;  Inf;  Inf;  pi/2 - 0.01;  Inf ];  % [ px, py, pz, yaw, pitch, roll ]
x_min = [ -Inf; -Inf; -Inf; -Inf; -pi/2 + 0.01; -Inf ];  % [ px, py, pz, yaw, pitch, roll ]
%u_max = [ 10;  100 ];  % [ fwd vel, turn angular vel ];
%u_min = [ -10; -100 ];  % [ fwd vel, turn angular vel ];
u_max = [ 5;  pi/2 ];  % [ fwd vel, turn angular vel ];
u_min = [ 0; -pi/2 ];  % [ fwd vel, turn angular vel ];
numerical_tolerance = 1e-4;
max_iter = 150;
pwm_iter = 30;
qp_cons = 0; % if this is 1 then use quadratic constraints (has no effect if we aren't using a qp solver)
needle_radius = 3.5;  % Obtained from Kallem & Cowan, "Image-guided control of flexible bevel-tip needles", Section V.A.

[ idxs ]
pos = 1:3;  % [ px, py, pz, yaw, pitch, roll ]
px = 1;
py = 2;
pz = 3;
yaw = 4;
pitch = 5;
roll = 6;

[ functions ]
folder = 'needle';
sys_model{1} = @needle_dynamics_fwd;
sys_model{2} = @needle_dynamics_turn;
instant_cost{1} = @needle_instant_cost;
instant_cost{2} = @needle_instant_cost;
terminal_cost = @( x,dummy ) needle_terminal_cost( x, user.terminal_loc, dummy );
instant_cons = @needle_instant_cons;
instant_cons_pattern = @needle_instant_cons_pattern;
update_lengths = @needle_update_lengths;

[ optfctn ]
solver = 'quadprog';
%solver = 'tomlab';
%tomlab_solver = 'minlpSolve';
%tomlab_solver = 'minlpBB';
%tomlab_solver = 'snopt';
%tomlab_solver = 'filterSQP';
%tomlab_solver = 'cplex';
%tomlab_solver = 'knitro';
%tomlab_solver = 'qpopt';
%tomlab_solver = 'sqopt';
%tomlab_solver = 'lssol';
%quadprog_solver = 'active-set';
quadprog_solver = 'interior-point-convex';
gamma = 100;
delta = 0.01;

[ armijo ]
alpha = 0.002;
beta = 0.72;
kmax = 100;

[ pwm ]
alphabar = 0.001;
betabar = 0.71;
eta = 0;
omega = 0.05;

[ cost ]
%instant_cost.Q = zeros(2);
instant_cost.Q = [ 0.01 0; 0 0.01 ];
instant_cost.Ktime = 0;
terminal_cost.K = 1;

[ obstacle{1} ]
type = 'sphere';
radius = 2;
center = [ 0; 0; 5 ];

[ obstacle{2} ]
type = 'sphere';
radius = 2;
center = [ -2; 0; 10 ];

[ obstacle{3} ]
type = 'sphere';
radius = 2;
center = [ 1; 3; 7 ];
