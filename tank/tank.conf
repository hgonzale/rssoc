[ main ]
batch_name = 'tank';
Nstates = 2;
Ninputs = 1;
Nsamples = 128;
x0 = [ 2; 2 ];  % [ px, py, pz, yaw, pitch, roll ]
u0 = [ 0 ];
d0 = [ 1; 0 ]; % remember to make sure to sum to one (otherwise this won't work)
terminal_loc = [ 0; 0 ];
t0 = 0;
tf = 10;
x_max = [  Inf;  Inf; ]; 
x_min = [ 0; 0 ];  
u_max = [ 100 ];  
u_min = [ -100 ]; 
numerical_tolerance = 1e-3;
max_iter = 100;
pwm_iter = 100;
qp_cons = 0; % if this is 1 then use quadratic constraints (has no effect if we aren't using a qp solver)

[ idxs ]
pos = 1:2;  % [ px, py ]
px = 1;
py = 2;

[ functions ]
folder = 'tank';
sys_model{1} = @tank_mode1;
sys_model{2} = @tank_mode2;
instant_cost{1} = @tank_instant_cost;
instant_cost{2} = @tank_instant_cost;
terminal_cost = @( x,dummy ) tank_terminal_cost( x, user.terminal_loc, dummy );
instant_cons = @tank_instant_cons;
instant_cons_pattern = @tank_instant_cons_pattern;
update_lengths = @tank_update_lengths;

[ optfctn ]
solver = 'tomlab';
%tomlab_solver = 'minlpSolve';
%tomlab_solver = 'minlpBB';
%tomlab_solver = 'snopt';
%tomlab_solver = 'filterSQP';
tomlab_solver = 'cplex';
%tomlab_solver = 'knitro';
%tomlab_solver = 'qpopt';
%tomlab_solver = 'sqopt';
%tomlab_solver = 'lssol';
gamma = 100;
delta = 0.1;

[ armijo ]
alpha = 0.01;
beta = 0.75;
kmax = 100;

[ pwm ]
alphabar = 0.005;
betabar = 0.72;
eta = 5;
omega = 1e-6;

[ cost ]
instant_cost.Q = zeros(2);
%instant_cost.Q = [ 0.01 0; 0 0.01 ];
instant_cost.Ktime = 0;
terminal_cost.K = 0;

