[ main ]
batch_name = 'quadrotor';
Nstates = 12;
Ninputs = 1;
Nsamples = 32;
len_cons = 10; %number of constraints 
x0 = [ 0; 0; 0; 0; 0; 0.1; 0; 0; 0; 0; 0; 0 ];
u0 = [ 0.1 ];
d0 = [ 0.8; 0.05; 0.05; 0.1 ];  % remember to make sure to sum to one (otherwise this won't work)
t0 = 0;
tf = 7.5;
u_max = [ 0.5; ];
u_min = [ 0; ];
% note: .349 is 20deg in radians 
%       [  qx,  qy,  qz,   vx,   vy,   vz, qtheta,  qphi, qpsi, vtheta, vphi, vpsi]
x_max = [  10;  10;   5;  Inf;  Inf;  Inf;   .349;  .349;  Inf;    Inf;  Inf;  Inf];
x_min = [ -10; -10;   -5; -Inf; -Inf; -Inf;  -.349; -.349; -Inf;   -Inf; -Inf; -Inf];
numerical_tolerance = 1e-4;
max_iter = 200;
pwm_iter = 25;
%qp_cons = 0; % if this is 1 then use quadratic constraints (has no effect if we aren't using a qp solver)
%higher_order = 0; % use a fancier integration scheme

[ quadrotor_params ]
length = 0.292;
mass = .794;
Ix = .00536; 
Iy = .00536;
gravity_accel = 9.8;
%gravity_accel = 1;
motor_const = 1/400; %Kf in the dynamics equations
air_const = .001; %Ki in the dynamics equations
frict_coeff = .5; %b in the dynamics equations 

[ functions ]
folder = 'quadrotor';
sys_model{1} = @qr_dynamics_vert;
sys_model{2} = @qr_dynamics_qtheta;
sys_model{3} = @qr_dynamics_qphi;
sys_model{4} = @qr_dynamics_qpsi;
instant_cost{1} = @qr_instant_cost;
instant_cost{2} = @qr_instant_cost;
instant_cost{3} = @qr_instant_cost;
instant_cost{4} = @qr_instant_cost;
terminal_cost = @qr_terminal_cost;
instant_cons = @qr_instant_cons;
%instant_cons_pattern = @qr_instant_cons_pattern;
update_lengths = @qr_update_lengths;

[ optfctn ]
solver = 'quadprog'
% quadprog_solver = 'active-set'
gamma = 10;
delta = 1e5;

[ armijo ]
alpha = 0.05;
beta = 0.8;
kmax = 100;

[ pwm ]
alphabar = 0.0005;
betabar = 0.72;
eta = 1;
omega = 1e-6;

[ cost ]
instant_cost.Qvx = 1; %weight on vx in the Q cost matrix that appears in the intital cost function
instant_cost.Qvy = 1;
instant_cost.Qvz = 1;
instant_cost.Qqtheta = 5;
instant_cost.Qqphi = 5;
instant_cost.Qvtheta = 1;
instant_cost.Qvphi = 1;
instant_cost.Qvpsi = 1;
instant_cost.R = 1; 
terminal_cost.qxd = 10; %desired qx that appears in the final cost function (represents a final location) 
terminal_cost.qyd = 10; 
terminal_cost.qzd = 10;
terminal_cost.qpsid = pi/2;
terminal_cost.K = 100;

[ idxs ]
qx = 1;
qy = 2; 
qz = 3;
vx = 4;
vy = 5; 
vz = 6;
qtheta = 7;
qphi = 8; 
qpsi = 9;
vtheta = 10;
vphi = 11; 
vpsi = 12;
% technically do not need these; they correspond to the dynamics function, which is not to be used
T1 = 1;
T2 = 2;
T3 = 3;
T4 = 4; 
